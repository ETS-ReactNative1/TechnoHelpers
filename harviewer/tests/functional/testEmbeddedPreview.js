/**
 * Check custom time stamps generated by console.timeStamp() method.
 */
define([
  "./config",
  "./DriverUtils",
  "dojo/node!@theintern/leadfoot",
], function(config, DriverUtils, leadfoot) {
  const { registerSuite } = intern.getInterface("object");
  const { assert } = intern.getPlugin("chai");
  const { testBase } = config;

  function assertWidthHeight(description, size, expectedWidth, expectedHeight) {
    if (typeof expectedWidth === "number") {
      assert.strictEqual(size.width, expectedWidth, `${description}: width`);
    }
    if (typeof expectedHeight === "number") {
      assert.strictEqual(size.height, expectedHeight, `${description}: height`);
    }
  }

  function getSize(session, element) {
    return session.execute(function(element) {
      return {
        width: element.clientWidth,
        height: element.clientHeight,
      };
    }, [element]);
  }

  function assertPreviewIsOk(id, expectedNetRows, expectedWidth, expectedHeight) {
    return function() {
      return this.parent
        .findByCssSelector(`#${id} iframe`)
        .then(function(iframe) {
          return getSize(this.parent, iframe)
            .then((size) => assertWidthHeight(`#${id} iframe`, size, expectedWidth, expectedHeight))
            .then(() => this.parent.switchToFrame(iframe))
            .end(Infinity)
            .findByCssSelector(".pageTable")
            .findAllByCssSelector(".netRow")
            .then((netRows) => assert.strictEqual(netRows.length, expectedNetRows, `#${id}.netRow`));
        })
        .switchToFrame(null);
    };
  }

  registerSuite("testEmbeddedPreview", {
    "testEmbeddedPreview": function() {
      // Some of these tests need a larger timeout for finding DOM elements
      // because we need the HAR to parse/display fully before we query the DOM.
      const { findTimeout } = config;
      const r = this.remote;

      const url = testBase + "tests/testEmbeddedPreview.html";

      return r
        .setFindTimeout(findTimeout)
        .get(url)
        .then(DriverUtils.waitForElements("iframe", 3, findTimeout))
        .then(assertPreviewIsOk("preview1", 2))
        .then(assertPreviewIsOk("preview2", 2, 400, 50))
        .then(assertPreviewIsOk("preview3", 11));
    },
  });
});
